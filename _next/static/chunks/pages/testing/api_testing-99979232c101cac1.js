(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[796],{8112:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/testing/api_testing",function(){return t(9618)}])},1001:function(n,e,t){"use strict";var i=t(5893),s=t(1664),r=t.n(s),l=t(7166),c=t.n(l),h=t(6574),a=t.n(h),o=c().bind(a()),d=function(n){var e=n.children,t=n.type,s=({frontend:[{link:"/frontend#structure",text:"Структура"},{link:"/frontend#naming",text:"Именование переменных"},{link:"/frontend#common",text:"Общее соглашение"},{link:"/frontend#react",text:"React"},{link:"/frontend#ts",text:"Typescript"},{link:"/linters",text:"Линтеры"},{link:"/frontend/testing_for_developer",text:"Тестирование"},],qa:[{link:"/testing",text:"Testing"},{link:"/testing/first_steps_for_tester",text:"First Steps For Tester"},{link:"/testing/bug_report",text:"Bug Report"},{link:"/testing/checklist",text:"Checklist"},{link:"/testing/test_design",text:"Test Design"},{link:"/testing/test_cases",text:"Test Cases"},{link:"/testing/api_testing",text:"API Testing"},{link:"/testing/mobile_app_testing",text:"Mobile App Testing"},],backend:[{link:"/backend#constants",text:"Константы, свойства, методы"},{link:"/backend#constuctions",text:"Конструкции языка"}],components:[]})[void 0===t?"qa":t].map(function(n){var e=n.link,t=n.text;return(0,i.jsx)("li",{children:(0,i.jsx)(r(),{href:e,children:t})},e)});return(0,i.jsxs)("div",{className:o("layout"),children:[(0,i.jsx)("div",{className:o("layout__column","layout__column_left"),children:(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:(0,i.jsx)(r(),{href:"/",children:"Главная"})}),s]})}),(0,i.jsx)("div",{className:o("layout__column","layout__column_right"),children:e})]})};e.Z=d},8322:function(n,e,t){"use strict";var i=t(5893),s=t(7166),r=t.n(s),l=t(3832),c=t.n(l),h=r().bind(c()),a=function(n){var e=n.children,t=n.color;return(0,i.jsx)("div",{className:h("highlight",t),children:(0,i.jsx)("div",{className:"highlight__inner",children:e})})};e.Z=a},9618:function(n,e,t){"use strict";t.r(e),t.d(e,{meta:function(){return c}});var i=t(5893),s=t(1151),r=t(1001),l=t(8322),c={author:"DaniilBaranov"},h=function(n){var e=n.children;return(0,i.jsx)(r.Z,{meta:c,type:"qa",children:e})};function a(n){var e=Object.assign({h1:"h1",p:"p",h2:"h2",pre:"pre",code:"code",ol:"ol",li:"li",h3:"h3",img:"img"},(0,s.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{children:"Тестирование API"}),"\n",(0,i.jsx)(e.p,{children:"Основные инструменты, которыми пользуется тестировщик при тестировании API - это Postman и API документация. Рассмотрим основные методы, статусы\nи особенности, на которые стоит обращать внимание при тестировании API."}),"\n",(0,i.jsx)(e.h2,{children:"Методы"}),"\n",(0,i.jsxs)("details",{children:[(0,i.jsx)("summary",{children:"GET"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"GET-запрос — метод передачи данных от клиента к серверу с целью получения информации, указанной с помощью конкретных GET-параметров\n"})})]}),"\n",(0,i.jsxs)("details",{children:[(0,i.jsx)("summary",{children:"POST"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"Метод POST предназначен для направления запроса, при котором веб-сервер принимает данные, заключённые \nв тело сообщения, для хранения. Он часто используется для загрузки файла или представления заполненной веб-формы\n"})})]}),"\n",(0,i.jsxs)("details",{children:[(0,i.jsx)("summary",{children:"PUT"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"Метод запроса PUT создаёт новый ресурс или заменяет представление целевого ресурса, данными представленными в теле запроса\n"})})]}),"\n",(0,i.jsxs)("details",{children:[(0,i.jsx)("summary",{children:"DELETE"}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"Метод запроса DELETE удаляет указанный ресурс\n"})})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'  Запрос GET передает данные в URL в виде пар "имя-значение" (другими словами, через ссылку), а запрос POST передает данные в теле запроса \n  (подробно показано в примере ниже).\n'})}),"\n",(0,i.jsx)(e.h2,{children:"Популярные статусы"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"200 OK (\xabхорошо\xbb)"}),"\n",(0,i.jsx)(e.li,{children:"201 Created (\xabсоздано\xbb)"}),"\n",(0,i.jsx)(e.li,{children:"301 Moved Permanently (\xabперемещено навсегда\xbb)"}),"\n",(0,i.jsx)(e.li,{children:"302 Moved Temporarily (\xabперемещено временно\xbb)"}),"\n",(0,i.jsx)(e.li,{children:"400 Bad Request (\xabнеправильный, некорректный запрос\xbb)"}),"\n",(0,i.jsx)(e.li,{children:"404 Not Found (\xabне найдено\xbb)"}),"\n",(0,i.jsx)(e.li,{children:"422 Unprocessable Entity (\xabнеобрабатываемый экземпляр\xbb)"}),"\n",(0,i.jsx)(e.li,{children:"500 Internal Server Error (\xabвнутренняя ошибка сервера\xbb)"}),"\n",(0,i.jsx)(e.li,{children:"502 Bad Gateway (\xabплохой, ошибочный шлюз\xbb)"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{children:"Postman"}),"\n",(0,i.jsx)(e.h3,{children:"Использование метода POST в Postman"}),"\n",(0,i.jsx)(e.p,{children:"POST-запросы используются для отправки новых данных на сервер. Рассмотрим пример отправки информации о новом пользователе в теле POST-запроса."}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"Задаем тип запроса — POST"}),"\n",(0,i.jsx)(e.li,{children:"Задаем request URL — https://jsonplaceholder.typicode.com/users"}),"\n",(0,i.jsx)(e.li,{children:"Нажимаем на вкладку Body, выбираем \xabRaw\xbb — JSON. Вставляем данные о пользователе из блока ниже:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'{\n    "id": 11,\n    "name": "QA eng",\n    "username": "tmtmOk",\n    "email": "user@site.com",\n    "address": {\n      "street": "Gagarina",\n      "suite": "30",\n      "city": "Moscow",\n      "zipcode": "600008",\n      "geo": {\n        "lat": "10.0000",\n        "lng": "80.0000"\n      }\n    },\n    "phone": "1-2345-6-7890",\n    "website": "website.com",\n    "company": {\n      "name": "website",\n      "catchPhrase": "website for QA engineers",\n      "bs": "real-time tutorials"\n    }\n}\n'})}),"\n",(0,i.jsxs)(e.ol,{start:"4",children:["\n",(0,i.jsx)(e.li,{children:"После этого наживаем кнопку SEND и отправляем POST-запрос."}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:"https://p-066764.f2.n0.cdn.getcloudapp.com/items/o0uX0Dry/036e6b3e-423e-41bc-ad18-f28073e7c6a7.jpeg?v=84f69788a542d815c3e219ba1620934c",alt:"Пример запроса POST"})}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"Вы увидите 201 Created message (как на скриншоте ниже), если запрос выполнился успешно."}),"\n",(0,i.jsx)(e.li,{children:"Данные, отправленные с помощью POST-запроса будут показаны во вкладке Body"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:"https://p-066764.f2.n0.cdn.getcloudapp.com/items/2Nu7DXdP/8af18ce6-5409-4ab6-87f2-993dbec0171d.jpeg?v=b6eb608a1aee96005c0548ab79635037",alt:"Пример ответа на POST"})}),"\n",(0,i.jsx)(l.Z,{color:"red",children:(0,i.jsx)(e.p,{children:"Во время тестирования, для каждого запроса проверяйте возвращаемый результат, код ответа сервера и время ответа сервера.\nИ не забывайте про негативные тесты!"})}),"\n",(0,i.jsx)(e.h3,{children:"Задание переменных"}),"\n",(0,i.jsx)(e.p,{children:"Параметризация — одна из самых полезных особенностей Postman. Часто необходимо выполнить один и тот же запрос на разных наборах данных.\nС помощью параметризации, можно использовать переменные при выполнении запросов."}),"\n",(0,i.jsx)(e.p,{children:"В Postman, параметры создаются с помощью двойных скобок:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"{{test}}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["Например, base URL — https://www.website.com, мы сохраняем это значение в переменной с именем url.\nВ этом случае мы можем обратиться к этой переменной из запроса, написав ",(0,i.jsx)(e.code,{children:"{{url}}"}),". Для того, чтобы отправить запрос на этот URL, мы подставим эту\nпеременную в запрос. Выглядеть это будет так: ",(0,i.jsx)(e.code,{children:"{{url}}/get?customers=new"}),". Запрос будет отправлен на https://www.website.com/get?customers=new"]}),"\n",(0,i.jsx)(e.h3,{children:"Создание тестов в Postman"}),"\n",(0,i.jsx)(e.p,{children:"Тесты в Postman позволяют убедиться, что API работает так, как этого от него ожидают."}),"\n",(0,i.jsx)(e.p,{children:"Пример"}),"\n",(0,i.jsxs)(e.p,{children:["Шаг 1: Рассмотрим обычный GET-запрос на ",(0,i.jsx)(e.code,{children:"https://jsonplaceholder.typicode.com/users"})," и переключаемся во вкладку Tests (Тесты).(URL https://jsonplaceholder.typicode.com/\nбыл записан в переменную ",(0,i.jsx)(e.code,{children:"{{url}}"}),") В секции сниппетов нажимаем на сниппет \xabStatus code: Code is 200\xbb.\nВ окне теста появится скрипт. Этот скрипт будет проверять, что запрос возвращает код ответа 200."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:"https://i0.wp.com/testengineer.ru/wp-content/uploads/2021/08/gajd-po-testirovaniyu-v-postman-21.webp?resize=696%2C286&ssl=1",alt:"Шаг 1"})}),"\n",(0,i.jsx)(e.p,{children:"Шаг 2: Нажмите кнопку Send (Отправить). В нижней части окна вы увидите результат выполнения теста (в нашем случае он выполнился успешно)."}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:"https://i0.wp.com/testengineer.ru/wp-content/uploads/2021/08/gajd-po-testirovaniyu-v-postman-22.webp?resize=696%2C279&ssl=1",alt:"Шаг 2"})}),"\n",(0,i.jsx)(e.p,{children:"Шаг 3: Давайте добавим еще один тест. В этот тесте мы будем сравнивать полученный результат с ожидаемым. Чтобы это сделать,\nвыбираем сниппет с названием \xabResponse body:JSON value check\xbb. Давайте проверим, что пользователь с именем Leanne Graham имеет userid 1."}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:"https://i0.wp.com/testengineer.ru/wp-content/uploads/2021/08/gajd-po-testirovaniyu-v-postman-23.webp?resize=696%2C193&ssl=1",alt:"Шаг 3"})}),"\n",(0,i.jsxs)(e.p,{children:["Шаг 4: Заменим название теста на что-то более понятное: вместо \xabYour test name\xbb напишем \xabCheck if Leanne Graham has the userid 1\xbb.\nТакже ",(0,i.jsx)(e.code,{children:"заменим jsonData.value на jsonData[0].name"})," (т.к. jsonData представляет собой массив, а массивы начинаются с 0):"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:"https://i0.wp.com/testengineer.ru/wp-content/uploads/2021/08/gajd-po-testirovaniyu-v-postman-24.webp?resize=696%2C193&ssl=1",alt:"Шаг 4"})}),"\n",(0,i.jsx)(e.p,{children:"Код теста будет выглядеть следующим образом:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'pm.test("Check if user with id1 is Leanne Graham", function () {\nvar jsonData = pm.response.json();\npm.expect(jsonData[0].name).to.eql("Leanne Graham");\n});\n'})}),"\n",(0,i.jsx)(e.p,{children:"Шаг 5: Нажимаем Send (Отправить)"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:"https://i0.wp.com/testengineer.ru/wp-content/uploads/2021/08/gajd-po-testirovaniyu-v-postman-25.webp?resize=696%2C303&ssl=1",alt:"Шаг 5"})}),"\n",(0,i.jsx)(e.h2,{children:"Снифферы(дополнить)"}),"\n",(0,i.jsx)(e.p,{children:"Снифферы – это особый инструментарий, позволяющий перехватывать и анализировать запросы, которые проходят через них.\nПодобные технологии очень полезны в ситуации, когда пользователю нужно получить сведения или сконфигурировать необходимый ответ от сервера.\nТакие методики работы с запросами позволяют не просто выполнять модульное тестирование ПО, но и работать с разными версиями веб-продукта."}),"\n",(0,i.jsx)(e.p,{children:"Разберем Charles Proxy.\nЕго привычно использовать в форме особого прокси-сервера между проверяемым ПО и сервером на стороне back-end."}),"\n",(0,i.jsx)(e.p,{children:"Преимущество использования снифферов в целом и Charles Proxy в частности в том, что можно просматривать весь трафик как с\nэкранов локальных машин, так и с мобильных устройств."}),"\n",(0,i.jsx)(e.h3,{children:"Интерфейс Charles proxy"}),"\n",(0,i.jsx)(e.p,{children:"Интерфейс Charles Proxy прост. Слева - список перехваченных запросов, справа - детали."}),"\n",(0,i.jsx)(e.p,{children:"В списке запросов есть две основные вкладки - Structure и Sequence."}),"\n",(0,i.jsx)(e.p,{children:"В первом случае запросы рассортированы по хостам-папкам. Наведя на любой из них, можно получить всю информацию о количестве\nзапросов к этому корневому хосту, доле удачных, таймингах, размерах и т.п. Фактически, здесь представлена вся та же информация,\nкоторую можно получить из панели разработчика в браузере. Выбрав конкретный URL, можно увидеть код ответа, версии протоколов,\nконтент и т.п. Тело запроса, заголовки, cookie (если есть) можно посмотреть в разных форматах - даже в HEX."}),"\n",(0,i.jsx)(e.p,{children:"С помощью контекстного меню запроса можно настраивать блокировки, повторять и изменять запросы. На этом мы еще остановимся."}),"\n",(0,i.jsx)(e.p,{children:"На вкладке Sequence запросы выведены по времени в виде настраиваемой таблицы. Видно, когда начался запрос, сколько он длился,\nего размер, статус и т.п. Наведя на конкретную строку, мы получим ту же информацию о теле, заголовках и т.п."}),"\n",(0,i.jsx)(e.p,{children:"Если запросов на экране слишком много, с помощью панели инструментов их можно очистить или вообще остановить перехват. Там же\nесть возможность включить и выключить троттлинг. Базовая настройка каждой из функций\nосуществляется через меню, а кнопки панели управления выступают своего рода тумблерами On / Off."}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:"https://hsto.org/r/w1560/getpro/habr/upload_files/292/76a/3b3/29276a3b370c84dbe6a716f39979fd49.png",alt:"Интерфейс"})})]})}e.default=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,i.jsx)(h,Object.assign({},n,{children:(0,i.jsx)(a,n)}))}},6574:function(n){n.exports={layout:"Layout_layout__3sqKB",layout__column:"Layout_layout__column__RP2Ig",layout__column_left:"Layout_layout__column_left__x_wOT",layout__column_right:"Layout_layout__column_right__q2i04"}},3832:function(n){n.exports={highlight:"HighLight_highlight__Ug3iF",red:"HighLight_red__mlLDm",pink:"HighLight_pink__aIP4d",purple:"HighLight_purple__XGWTv","deep-purple":"HighLight_deep-purple__e0MOx",indigo:"HighLight_indigo__Hn4cd",blue:"HighLight_blue__1LHpt","light-blue":"HighLight_light-blue__hKZI3",cyan:"HighLight_cyan__kFbdN",teal:"HighLight_teal__JyDAU",green:"HighLight_green__96DOg","light-green":"HighLight_light-green___A_7e",lime:"HighLight_lime__gkZXv",yellow:"HighLight_yellow__YJtR_",amber:"HighLight_amber__BLbz6",orange:"HighLight_orange__zYELz","deep-orange":"HighLight_deep-orange__fu5qH",brown:"HighLight_brown__MIRlv"}},1151:function(n,e,t){"use strict";t.d(e,{ah:function(){return r}});var i=t(7294);let s=i.createContext({});function r(n){let e=i.useContext(s);return i.useMemo(()=>"function"==typeof n?n(e):{...e,...n},[e,n])}}},function(n){n.O(0,[146,774,888,179],function(){return n(n.s=8112)}),_N_E=n.O()}]);